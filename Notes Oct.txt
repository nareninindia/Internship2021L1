18th Oct 2021

Repository or repo -> Store project files
Github.com/bitbucket.com -> Project repos -> Store project files.

Narendra -> 10 lines of code -> Remote repo -> Downloads the code from the remote repo -> Add 10 more lines to same file. -> Upload to remote repo -> Narendra - Download the latest code from the remote repo.

Login.java
Logout.java

Logout.java -> 10 more lines, remove 2 lines of code

Google drive -> Upload all the files everytime
Google drive -> Upload only changed files
Google drive -> Upload only changed lines

Overwrite one other's code
Drive may not have tested code
Multiple files can't handle
Multiple team members can't handle

Version contrrol/Source control

Git, Svn(Subversion), TFS(Microsoft), Mercurial

Git, Github.com

Git -> Concept
Github.com -> Implementation
Github -> Opensource -> Free

Git: We'll see the changes we did only

Repository - Place we upload the code to.
Commit -> The process of uploading the code to repositories.
Push -> The process of uploading the code to remote repository.
Fetch -> The process of downloading the code from remote repositories.
Pull -> The process of downloading the code from repositories.

Git - Local repository, remote repository
Svn - Remote repository

Repository - Local repository - .git - Commit - Commit - Push - Remote repo - Fetch code - .git - Pull - File system

Repository - Local Repository - Changes - Commit + Push - Remote repo - Fetch + Pull

Commit - SHA256 key - order of commits maintained

Repository - Multiple branches
Branch -> Folder

dev_order_lifecyle - Code specifically tracking order lifecycle (Place, Accept, Cook, Delivery) - tested
master - Tested and reviewed code - Deploy

dev_order_lifecyle(13) -> master(10)
Pull request(PR) -> Show commits(3) -> Review the PR -> Merge
dev_order_lifecyle(13) -> master(13)

Version control/source control
Git
Github.com
Repository - Store code
Branch - Folder
Local, Remote repos - Local, Remote repository
.git - Keeps track of changes, order of changes
Commit - Sending code to local repo
Push - Sending commits to remote repo
Fetch - Getting a commit into .git
Pull - Making changes to FS based on .git
Pull request/PR - Review code from one branch to another branch
Merge - Move the code from one branch to another branch
Clone - Create a new local repo based on an existing remote repo.

Exercise - Github.com, Sourcetree tool in laptop

-----
19th Oct 2021

Sourcetree
Connecting Github account in Sourcetree
Added a new public repo in Github
Cloned the repo in Sourcetree
Added a new file in repo/project folder
Committed and pushed to remote.
Changed an existing file in local, committed and pushed to remote .
Changed an existing file in remote, pulled it into local.
Gave access to another dev in Github.

Exercise: Create a project in Github, add some files to remote repo from Sourcetree, give access to 'nareninindia'
-----

28th Oct 2021
Class -> Template with properties
Object -> Instance of class
Constructor -> Way to initialize a class
Default constructor
Non-parameterized constructor
Parameterized constructor
Constructor overloading -> Multiple constructors for same class
Methods

Student s = new Student(); // default constructor, non-parameterized constructor
Student s = new Student(1, "Rajesh", 3); // parameterized constructor

Exercise:
1. Complete all the earlier programs and put them in Github.
2. Run the HelloWorld and Student programs from my repo in DrJava or Geany and send screenshots.
3. Commit the code files to your Github project and send the Github links in Whatsapp group.
4. While commiting code, do not commit .class files

Soumya -> Division for quotient
Jahvani -> Multiplication
Nikhil -> Sub
Vinay - Division for remainder

Exercise: 1st Nov 2021
Create a Student class generate unique id like this
<YearOfJoining><Course><RollNumber> if year after 2015
<RollNumber><Course><YearOfJoining> if older than 2015
if, else - 1
Method overloading with 2 different method signatures - 2

Naming conventions
How to write comments
Inheritance - Copy properties of one class into another class

3rd Nov 2021
Review inheritance
Super
This

super - Access properties of parent class
this - Access properties of current class

5th Nov 2021
Final keyword
Access modifiers - public, private

final - stop child classes from overriding a method, to declare of constant
Access modifiers - public, private, protected, default
public - to give complete open access to a class's properties.
private - to give access to a class's properties inside that class only.

8th Nov 2021:
Access modifiers - protected, default

Windows
monitor.printW()
monitor.printi()
monitor.printn()
monitor.printd()
monitor.printo()
monitor.printw()
monitor.prints()
keyboard component -> some methods on monitor component -> monitor methods above are public.

CAPSLOCK -> WINDOWS
keyboard.enableCapslock() -> capsLockEnabled = true
monitor.printW()
monitor.printI()
monitor.printN()
monitor.printD()
monitor.printO()
monitor.printW()
monitor.printS()
keyboard component -> monitor doesn't need to know about keyboard capslock state -> enableCapsLock can be private
keyboard component -> some methods on monitor component -> monitor methods above are public.

if (capsLockEnabled) {
  monitor.printI();
} else {
  monitor.printi()
}

Login -> collect values from frontend - public -> login credentials match - private

protected - to give access to child classes only.
default - to give access to child classes and in same package.

9th November 2021:
instanceof keyword
interface

instanceof -> we can identify the Class/Interface type in runtime
We can declare parent type and assign an object of child class
During compilation, the property identification happens from the declared type. (LHS)
During running(runtime), the property running happens from the defined type. (RHS)

interface -> define constants, declare variables or methods
Child classes of interface should define the methods and variables declared in the interface.

Exercise - 9th November 2021:
0. Run the programs from today's class.
1. Create a studentId generation method in Student class (Same as exercise from Nov 1st)
<YearOfJoining><Course><RollNumber> if year after 2015
<RollNumber><Course><YearOfJoining> if older than 2015
2. Override the studentId generation method in CSEStudent class
<Course><RollNumber><YearOfJoining>
3. Declare a variable of type Student and assign an object of type CSEStudent to it.
4. Generate studentId for Student created in point 3.
5. Find whether Student(from point 3) is of type ECEStudent using instanceof keyword.
6. Create an empty interface CollegeGoer and let Student class implement CollegeGoer(using implements keyword)

OS -> Interface between user and machine.
Windows desktop - CPU, monitor, keyboard, mouse, CD writer, camera
Windows - Device drivers

interface CDWriting {
  void writeLine(String line); // declaring rules
}
interface CDReading {
  String readLine(); // declaring rules
}

class DellCDWriting implements CDWriting, CDReading {
  void writeLine(String line) {
    // Using lasers to write onto the disc
  }
  String readLine() {
    // Logic for reading from CD drive
  }
}

Select mp3 file -> Write to CD
CDWriting cdWriting = new DellCDWriting();
for (;;) {
  cdWriting.writeLine(...); // Using lasers to write onto the disc
}
mp3 file written on to the disc

Interfaces define rule for child classes.

interface Camera {
  void takePhoto(); // rules
  void applyBWFilter();
}

class DellCamera {
  void takePhoto() {
   // Open shutter, take light in and close shutter
  }
}

Operating the camera using mouse. [mouse, monitor, CPU, camera]
OS doesn't know which method to call.
camera.takePhoto()

Spring and Spring Boot -> Web applications/Advanced Java
Spring Boot -> interfaces
Devs -> implement Spring Boot related rules and then write code.
Devs -> Framework - Declaring rules
Other devs -> Implement our framework/rules

Exercise 10th Nov 2021: // implements, extends, instanceof
7. Declare a method for id generation in CollegeGoer interface.
8. Implement this id generation method in Student class and all sub classes of student.
9. Create a new class Faculty which implements CollegeGoer interface.
10. Implement this id generation method in Faculty class.

// implements, extends, instanceof

11th Nov 2021:
implements - multiple, extends - 1
abstract class

public interface Person {
  public void getName();
  ....
}

public interface CollegeGoer {
  public void getUniqueId();
}

public class Student implements CollegeGoer, Person { // You can implement any number of interfaces
  public void getUniqueId() {
    // Generating unique id logic
  }
  public void getName() {

  }
}

public class CSEStudent extends Student {
  public void getUniqueId() {
    // Generating unique id logic
  }
}

public class ECEStudent extends Student {
  public void getUniqueId() {
    // Generating unique id logic
  }
}

public class Intern extends CSEStudent, ECEStudent { // This is not valid in Java - multiple inheritance

}

public class CSEIntern extends CSEStudent {

}

public class ECEIntern extends ECEStudent {

}

CollegeGoer is interface
Student class is implementing CollegeGoer interface
CollegeGoer declared getUniqueId method
Student class has implementation for getUniqueId method, StudentId has definition for getUniqueId method
CSEStudent class inheriting (extending) Student class
CSEStudent class is overriding getUniqueId method

Multiple interfaces can be implemented in one class.
Multiple classes cannot be inherited at once in on class. Multiple inheritace is not allowed in Java.
Multi level inheritance is allowed in Java.

Vehicle -> Car -> TataCar [Multi level inheritance]

abstract class = features of class + features of interface
class should define all methods in it
interface should only declare methods
abstract class can define a few methods and can just declare a few methods.

We can't create an object for an interface
We can't create an object for an abstract class
abstract class can implement an interface
class should extend an abstract class for inheriting it.

Exercise 11th Nov 2021:
1. Create a Person interface with getName method
2. Inherit it in CollegeGoer interface
3. Make CollegeGoer2 as an abstract class which implements Person interface
4. Do not implement getName method in the abstract class CollegeGoer2. Show what happens and explain it.
5. Take Student2 class and inherit CollegeGoer2. Do not implement getName method. Show what happens and explain it.

12th Nov 2021:

Java features:
Object-oriented - All programmning is based on classes and objects.
inheritance - Getting properties from a parent class into a child class.
abstraction - Provide declartions without implementations. - using abstract classes and interfaces (in Java)
encapsulation - should be able to hide inner working of a class - using all access modifiers public, private, protected and default (in Java)

JVM - Java Virtual Machine (a specification for JRE)
JRE - Java Runtime Environment (JRE is implementation of JVM)
JDK - Java Development Kit

Java Program -> Compile it -> .java gives .class in bytecode -> JRE can understand bytecode

OS is a big box -> JRE/JVM is small box inside the OS box
1. Any issues in the JRE/JVM will not affect the OS. They will be limited to the JRE.
2. You can create multiple JRE/JVMs at once.
3. Program execution is platform agnostic. (Linux, Mac OS, Windows)

JDK:
Enable writing java programs and compiling .java files to .class files

LG TV (Java)
To write the LG TV OS they need JDK
LG TV needs just JRE to run and doesn't need JDK.

inner class: SHould be avoided
Student.java
public class Student {

  public inner class CollegeGoer {

  }
}

15th Nov 2021:
Memory allocation
Static
Documentation through comments

Memory allocation:
class area, heap, stack, registers

javac Student.java
java Student.class

All class files are loaded into JRE -> JRE verfies the class files -> Program runs
Classes, methods -> Class area // HelloWorld.class, HelloWorld.main(...), Student.studentsCount -- Load the class
Objects -> Heap area [vehicle obj] // h1 = new HelloWorld(), h1.nonStaticVariable, h1.xyz() {HelloWorld.main(...)} -- Run
Stack -> local variables [vehicle]
Registers -> Memory mapping [vehicle <-> vehicleObj]

Vehicle vehicle = new Vehicle();

JRE -> search for the main method -> Run the main method

Static methods can access static properties only directly.
Non-static methods can access static properties without any problem.

Final:
variable -> constant
method -> cannot override
class -> cannot inherit

Static:
method -> It will allow us to access a method directly using a class. Object is not required. - Avoided
variable -> Can be accessed directly from class. - Avoided
Objects will not have their own copies of static variables and static methods
class -> Can be accessed directly from the class containing it.

Student.java -> Student.class, Student.CollegeGoer.class
public class Student {

}

public static class CollegeGoer {

}

Student.CollegeGoer collegeGoer = new Student.CollegeGoer();

Java Exercise 15th Nov 2021:
1. Create a public, static counter variable -> studentsCount, with initial value as 0, inside Student class
2. Whenever a new student object is created, this counter should increment. Write the incrementation logic inside constructors.
3. Write a HelloWorld class with a main method. Create a non-static variable in this class. Increment this variable inside the main method and print it.
4. Create a String constant in CSEStudent and ECEStudent classes with name code. CSEStudent.CODE = "CSE", ECEStudent.CODE = "ECE" by following all the conventions we discussed.
5. Install IntelliJ Java IDE - community edition


Java Exercise 16th Nov 2021:
1. Create a new method in Student class called runMainMethod().
2. Call main(...) method of HelloWorld from inside this runMainMethod().
3. main(...) method need a String array argument. Find how to create the String array and send it as argument.

25th November 2021:
String class and String methods

Java Exercise 25th November 2021:
Common:
  Create StringExercise class in IDE
  Use equals and equalsIgnoreCase method
Soumya: 1 example for each method below
  startsWith
  indexOf
  length
  replace
  substring
  toUpperCase
Vinay: 1 example for each method below
  endsWith
  lastIndexOf
  isEmpty
  replaceAll
  split
  toLowerCase

Array: Items of similar data type
[1, 2, 3]
["S", "T", "R"]
['C', 'H', 'A']

Packages
Debugging
How to use external jars and libraries
Collections - DS
try, catch final - Exceptions
Threads, Runnable, CompletableFutures, ThreadPoolExecutor
Unit testing
Wrapper classes

26th November 2021:
int[] intArray = {4, 5, 6};
String[] emptyStringArray = {};
int length = emptyStringArray.length; // Output is 0
StringExercise[] stringExercises = {new StringExercise(), new StringExercise()};
int numberAtIndex2 = intArray[2]; // Output is 6

Java exercise - 26th November 2021:
1. Run each other's code and read about all the available methods in String class through String documentation.
2. Write code to combine multiple Strings: s1 = "Hello", s3 = "World", output = "Hello World"
3. Intialize an array of Strings: ["HELLO", "WORLD"]. Write code to print each character of these Strings. Hint: Use 'nested for loop'
Output:
H
E
L
... until D

27th November 2021:
s3 = s1.concat(s2);
s4 = s1 + s2;
s5 = s1.concat(" ").concat(s2);
s6 = s1 + " " + s2

facebook:
authentication
newsfeed
friendship
apps

Packages - Packages are folders in java to segregate files.
How to debug? Put breakpoints. Click Debug option instead of Run option
Adding an external jar:
1. Find the jar file you want to add - org.json
2. File -> Project structure -> libraries -> + -> java -> Select the downloaded jar
3. Access the classes available in org.json - JSONObject, JSONObject.append, JSONObject.toString

Java exercise 27th November 2021:
1. Add org.json jar file to the project.
2. Create a JSONObject for {"name": "Rahul", "year": 3, "college": "XYZ"}
3. Using JSONObject methods print the value of key "name". Output should be "Rahul".
4. Add StringUtils jar file to the project.
5. Compare if value of key "name" and value of key "college" are same or not. Use equals method of StringUtils.

org.json jar download
https://repo1.maven.org/maven2/org/json/json/20210307/
StringUtils jar download
https://mvnrepository.com/artifact/org.apache.commons/commons-lang3/3.12.0

29th November 2021:
Collections - Datastructures

DS:
Arrays
Stack - FILO
Queue - FIFO
LinkedList
Tree - 0 {1 {3, 4, 5}, 2 {7. 8}}
Graph

int[] n = {1, 2, 3}
int[] n = new int[size];
int[] n = new int[3];
n[0] = 1;
n[1] = 2;
n[2] = 3; // {1, 2, 3}
int[] o = new int[3];
o[0] = 10;
o[1] = 11;
o[2] = 12; // {1, 2, 3}
int[][] m = new int[2][3];
m[0] = n;
m[1] = o;
// {{1, 2, 3}, {10, 11, 12}}

Array -> Index vs value relationship is always maintained.

Collections:
List -> ArrayList, LinkedList
Set -> HashSet
Map -> HashMap, ConcurrentHashMap

List -> Order is maintained
Collection of elements
{1, 2, 3}

Java exercise 29th November 2021:
1. Read List documentation (Search for java.util.List)
2. Add 10 Strings to the stringList ArrayList object in ListExercise.addStringsToList method
3. Remove the String at 5th index.
4. Print the String at 9th index.

30th November 2021:
Lists and ArrayLists details, LinkedList

Lists:
Order is maintained.
Dynamically increase the size of the list.
Dynamically decrease the size of the list.

Steps:
Initial capacity is 10
Look for a space inside RAM/memory to fit 10 strings
Going out of intial capacity
Look for a space inside RAM/memory to fit 20 strings
Capacity will be increased
New elements are added
Look for a space inside RAM/memory to fit 40 strings

stringList[40] = "Forty" // capacity to 80
stringList = new ArrayList(41]); // Look for a space 41 strings

add and set
subList
toArray

6th December 2021:
LinkedList

Diff: LinkedList, ArrayList
1.LL. Elements are stored and connected through addresses.
1.AL. Elements are stored by indexes and one after the other.

Disadvantages:
1. LL memory usage is higher compared to AL
2. Reading is more complex compared to AL - Time
3. Reading based on index is also complex compared to AL. - Time

Advantages:
1. Adding values and removing values from the list is easier compared to AL

Reading is more - Go for AL
Editing is more - Go for LL

add, remove, subList

addStringsToList:
3
5
Six
Second index:Five
Five
4
Second index:Ten
Eleven
Second index:Five
Second index:Five

addStringsToLinkedList:
3
5
Six
Second index:Five
Five
4
Second index:Ten
Eleven
Second index:Five
Second index:Five

Java exercise - 6th Dec 2021: Need to show on 8th December 2021
1. Find what is a CSV file, if you don't know already.
2. Download: Business financial data: June 2021 quarter – CSV from https://www.stats.govt.nz/large-datasets/csv-files-for-download/
3. Read the data using OpenCSV library.
OpenCSV.jar: https://mvnrepository.com/artifact/com.opencsv/opencsv/5.5.2
Examples for reading from a CSV file example and storing it into a class: Search in Google.
4. Create a data class to store data from the given CSV file.
5. Load that data into an ArrayList and find the size of the ArrayList.
6. Load that data into an LinkedList and find the size of the LinkedList.

8th December 2021:
1. Unordered collection of data.
2. It will not allow duplicates.

L {1, 2, 5, 3, 6, 3}
L[0] -> 1
L[4] -> 6
L -> {1, 2, 3, 6, 3}

S {1, 2, 5, 3, 6}
S[0] -> 1 -> Not possible
S -> {2, 3, 6, 1, 5}
S -> {3, 2, 6, 1, 5}

Set -> Interface
HashSet -> One type of set -> Class

Java exercise - 8th Dec 2021
1. How Java compares objects to be same or not?

14th December 2021:
equals and hashCode
Map

List - Ordered collection of items -> ArrayList, LinkedList
Set - Unordered collection of items -> HashSet
Iterator - Traverse through a collection

Map, HashMap

Map - Unordered collection of <key, value> pairs

List -> A, B, C, D..
List.get(1) -> B

Map -> ("planet1", "Mercury"), ("planet2", "Venus"), ("planet3", "Earth")
Map.get("planet1") -> "Mercury"
Map.put("planet4", "Mars")
Map -> ("planet1", "Mercury"), ("planet2", "Venus"), ("planet3", "Earth"), ("planet4", "Mars")
Map.put("planet4", "Earth")
Map -> ("planet1", "Mercury"), ("planet2", "Venus"), ("planet3", "Earth"), ("planet4", "Earth")

Java exercise - 14th Dec 2021
1. Create a Student class with attributes id(String), name(String) and age(int)
2. Override equals and hashCode methods so that if 'id's of two Student objects are same, then those two students should be conisdered same.
3. Practice the Map example shown in class.

Java exercise - 15th Dec 2021:
1. Create a map of planets like in previous class.
2. Use 'Iterator' over map.keySet and print the values from the map.

HashMap - UnSync - Unordered keys
LinkedHashMap - UnSync - Ordered keys based on 'Linking' algorithm - Space and insertion time are higher compared to HashMap
ConcurrentHashMap - Sync - Slower compared to LinkedHashMap or HashMap

16th December 2021:
try, catch, finally - Exceptions

Java exercise - 16th Dec 2021
1. Create a LinkedHashMap of Students - with id as key and Student as value.
2. Print the values of the LinkedHashMap.
3. Write a program to generate ArrayOutOfBoundsException.
4. Put it in try catch block.

17th December 2021:
try, catch, finally
throws and throw
Exceptions and Custom exceptions

try-catch-finally -> Catch exceptions
At least one catch block or one finally blockis required for a try block
You can stack catch blocks or you can catch multiple exceptions from one catch block.
Only one finally block can be written for a try block.
finally block is guaranteed to be executed independent of catching an exception.
Common things for finally block are closing a file connection or DB connection or releasing resources.

throws -> Sending the responsibility of catching an exception to a higher function.

throw -> Send/throw an exception

FB friends -> 5000 friends
5001th friend -> throw FriendLimitReachedException

SBI -> Current price -> Rs.500
Buy order -> Rs.10 -> throw NotAValidPriceException

Java exercise - 17th Dec 2021
1. Continue previous program. When ArrayOutOfBoundsException happens throw a CustomException and catch it.
2. Create a singly linked list in Java - https://www.javatpoint.com/java-program-to-create-and-display-a-singly-linked-list
3. Extends the keywords document with new topics and revise all the previous topics.
4. Read about wrapper classes in Java.

Next topics in Java:
Wrapper classes
Threads, Runnable, CompletableFutures, ThreadPoolExecutor
Unit testing

21st December 2021:
Wrapper classes

int -> Integer
int a = 5 -> Integer b = new Integer(5)
Integer b = new Integer("5");
String s5 = "-5"; // "abc"
int a = -5
Integer b = new Integer(s5);
int a = b.intValue();
int a = Integer.parseInt(s5);

int[][]
List<Integer> aList = new ArrayList<Integer>(10);
int a; // a=0
Integer a; //a=null

Advantages:
1. Easy methods to convert numbers from String format to int primitive type.
2. Helpful in collections framework.
3. Helpful to hold a null as default instead of 0.

int -> Integer
long -> Long
boolean -> Boolean
double -> Double
float -> Float
-----

Threads:
Serial execution -> One after the another; one line after another line
Parallel execution -> Run multiple methods at the same time.
Main thread -> Main flow of program execution by the JVM

addStringsToHashSet and addVehiclesToHashSet -> Run in parallel
MainThread {
  Thread {
    addStringsToHashSet()
  }
  Thread {
    addVehiclesToHashSet()
  }
  customComparison()
}

Thread -> Deviate from the main thread execution

Java exercise - 21st Dec 2021
1. Write a program to parse this String into double: "21.000000"
2. Create a thread to print numbers 1 to 100.
3. Create another thread in above thread to print number 101 to 200. (Nested threads)
